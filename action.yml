name: "Unregistry Docker Push Action"
description: "Push Docker images directly to remote servers via SSH using unregistry (docker pussh) - skip registry complexity"
author: "sonofbytes"

branding:
  icon: "upload-cloud"
  color: "blue"

inputs:
  image:
    description: "Docker image name:tag to push (must exist in local Docker daemon)"
    required: true
  destination:
    description: "SSH destination (user@host or host, with optional :port) for the remote Docker host"
    required: true
  platform:
    description: "Optional platform to push (e.g., linux/amd64) for multi-arch images"
    required: false
    default: ""
  ssh_key:
    description: "Optional SSH private key for authentication (will be masked in logs)"
    required: false
    default: ""
  ssh_password:
    description: "Optional SSH password for authentication (will be masked in logs). Cannot be used together with ssh_key."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    # Step 1: Fail early on unsupported Windows runners
    - name: Check runner OS compatibility
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "::error::unregistry (docker-pussh) is not supported on Windows runners. Please use ubuntu-latest."
        exit 1

    # Step 2: Validate authentication inputs
    - name: Validate authentication inputs
      shell: bash
      run: |
        if [[ -n "${{ inputs.ssh_key }}" && -n "${{ inputs.ssh_password }}" ]]; then
          echo "::error::Cannot specify both ssh_key and ssh_password. Please provide only one authentication method."
          exit 1
        fi
        
        if [[ -z "${{ inputs.ssh_key }}" && -z "${{ inputs.ssh_password }}" ]]; then
          echo "::warning::No SSH authentication provided. Attempting connection without explicit authentication (relies on SSH agent or default keys)."
        fi

    # Step 3: Install docker-pussh and dependencies
    - name: Install docker-pussh and dependencies
      shell: bash
      run: |
        echo "Installing docker-pussh and dependencies..."
        
        # Install sshpass if password authentication is used
        if [ -n "${{ inputs.ssh_password }}" ]; then
          echo "Installing sshpass for password authentication..."
          sudo apt-get update -qq
          sudo apt-get install -y sshpass
        fi
        
        # Create Docker CLI plugins directory
        mkdir -p ~/.docker/cli-plugins
        
        # Download docker-pussh binary from upstream
        curl -sSL "https://raw.githubusercontent.com/psviderski/unregistry/main/docker-pussh" \
          -o ~/.docker/cli-plugins/docker-pussh
        
        # Make executable
        chmod +x ~/.docker/cli-plugins/docker-pussh
        
        # Verify installation
        docker pussh --help >/dev/null
        echo "docker-pussh installed successfully"

    # Step 4: Setup SSH key if provided
    - name: Configure SSH key
      if: inputs.ssh_key != ''
      shell: bash
      run: |
        echo "Setting up SSH key for authentication..."
        # Write SSH key to temporary file with secure permissions
        echo "${{ inputs.ssh_key }}" > /tmp/unregistry_ssh_key
        chmod 600 /tmp/unregistry_ssh_key
        
        # Add to SSH agent if available, otherwise rely on file-based auth
        if command -v ssh-add >/dev/null && [ -n "$SSH_AUTH_SOCK" ]; then
          ssh-add /tmp/unregistry_ssh_key 2>/dev/null || true
        fi
        
        echo "SSH key configured"

    # Step 5: Setup SSH password environment if provided
    - name: Configure SSH password authentication
      if: inputs.ssh_password != ''
      shell: bash
      run: |
        echo "Setting up SSH password authentication..."
        # Mask the password in logs
        echo "::add-mask::${{ inputs.ssh_password }}"
        
        # Set environment variable for sshpass
        echo "SSHPASS=${{ inputs.ssh_password }}" >> $GITHUB_ENV
        echo "SSH password authentication configured"

    # Step 6: Execute docker pussh with all options
    - name: Push Docker image to remote server
      shell: bash
      env:
        PUSSH_IMAGE: ${{ inputs.image }}
        PUSSH_DESTINATION: ${{ inputs.destination }}
        PUSSH_PLATFORM: ${{ inputs.platform }}
        PUSSH_SSH_KEY: ${{ inputs.ssh_key }}
        PUSSH_SSH_PASSWORD: ${{ inputs.ssh_password }}
      run: |
        echo "Pushing Docker image to remote server..."
        echo "Image: $PUSSH_IMAGE"
        echo "Destination: $PUSSH_DESTINATION"
        
        # Parse destination to extract components for SSH connection test
        if [[ "$PUSSH_DESTINATION" =~ ^(([^@]+)@)?([^:]+)(:([0-9]+))?$ ]]; then
          SSH_USER="${BASH_REMATCH[2]}"
          SSH_HOST="${BASH_REMATCH[3]}"
          SSH_PORT="${BASH_REMATCH[5]:-22}"
          
          # Construct user@host format
          if [ -n "$SSH_USER" ]; then
            SSH_USER_HOST="$SSH_USER@$SSH_HOST"
          else
            SSH_USER_HOST="$SSH_HOST"
          fi
        else
          echo "::error::Invalid destination format. Expected [user@]host[:port]"
          exit 1
        fi
        
        echo "Parsed destination - User: ${SSH_USER:-default}, Host: $SSH_HOST, Port: $SSH_PORT"
        
        # Test SSH connection first
        echo "Testing SSH connection to $SSH_USER_HOST..."
        if [ -n "$PUSSH_SSH_PASSWORD" ]; then
          # Test with password authentication
          if ! sshpass -e ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER_HOST" "echo 'SSH connection successful'"; then
            echo "::error::Failed to establish SSH connection using password authentication"
            exit 1
          fi
        elif [ -n "$PUSSH_SSH_KEY" ]; then
          # Test with key authentication
          if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i /tmp/unregistry_ssh_key -p "$SSH_PORT" "$SSH_USER_HOST" "echo 'SSH connection successful'"; then
            echo "::error::Failed to establish SSH connection using SSH key"
            exit 1
          fi
        else
          # Test with default authentication (SSH agent or default keys)
          if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER_HOST" "echo 'SSH connection successful'"; then
            echo "::error::Failed to establish SSH connection using default authentication"
            exit 1
          fi
        fi
        
        # Build the docker pussh command
        cmd="docker pussh"
        
        # Add platform option if specified
        if [ -n "$PUSSH_PLATFORM" ]; then
          cmd="$cmd --platform $PUSSH_PLATFORM"
          echo "Platform: $PUSSH_PLATFORM"
        fi
        
        # Add SSH authentication options
        if [ -n "$PUSSH_SSH_PASSWORD" ]; then
          echo "::warning::SSH password authentication has limitations with docker pussh. Consider using SSH key authentication for better reliability."
          echo "Using SSH password authentication with sshpass wrapper"
          
          # For password authentication, we'll use sshpass to wrap the docker pussh command
          # This is a workaround since docker pussh may not directly support password auth
          cmd="sshpass -e $cmd"
          
        elif [ -n "$PUSSH_SSH_KEY" ]; then
          cmd="$cmd -i /tmp/unregistry_ssh_key"
          echo "Using provided SSH key for authentication"
          cmd="$cmd $PUSSH_IMAGE $PUSSH_DESTINATION"
        else
          echo "Using default SSH authentication (SSH agent or default keys)"
          cmd="$cmd $PUSSH_IMAGE $PUSSH_DESTINATION"
        fi
        
        echo "Executing docker pussh command..."
        
        # Execute the push command
        eval "$cmd"
        
        echo "âœ… Successfully pushed $PUSSH_IMAGE to $PUSSH_DESTINATION"

    # Step 7: Cleanup
    - name: Cleanup authentication files
      if: always()
      shell: bash
      run: |
        # Remove temporary SSH key file
        if [ -f /tmp/unregistry_ssh_key ]; then
          rm -f /tmp/unregistry_ssh_key
          echo "SSH key file cleaned up"
        fi
        
        # Remove temporary SSH config files if any exist
        for config_file in "$HOME"/.ssh/config_unregistry_*; do
          if [ -f "$config_file" ]; then
            rm -f "$config_file"
            echo "Temporary SSH config file cleaned up: $config_file"
          fi
        done
        
        # Clear password from environment
        if [ -n "${{ inputs.ssh_password }}" ]; then
          unset SSHPASS
          echo "SSH password cleared from environment"
        fi